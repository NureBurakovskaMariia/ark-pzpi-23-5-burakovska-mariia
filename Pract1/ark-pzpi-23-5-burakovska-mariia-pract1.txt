  МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ







Звіт
з практичної роботи № 1 з дисципліни
Аналіз та рефакторинг коду
   





Виконала:                                                                 Перевірив:
ст. гр. ПЗПІ-23-5                        			ст. викладач кафедри ПІ
Бураковська Марія					Сокорчук Ігор Петрович







Харків 2025
     Тема вимоги: Правила оформлення програмного коду за вимогами JetBrains.
     Мета роботи: Ознайомитися з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для обраної мови програмування Kotlin, а також навчитися аналізувати та рефакторити код для покращення його якості.
     Хід роботи
     У сучасній розробці правила оформлення коду мають величезне значення. Вони допомагають команді працювати в єдиному стилі, роблять код більш читабельним і передбачуваним, а також значно зменшують кількість помилок.
     Коли всі члени команди дотримуються однакових правил, код можна легко прочитати й зрозуміти навіть без пояснень автора. Це особливо важливо у великих проєктах, де над кодом працює кілька людей.
     Мова Kotlin, яка зараз є однією з основних для Android-розробки, має свої офіційні coding conventions — набір рекомендацій, розроблений компанією JetBrains.
     Вони визначають, як правильно структурувати, форматувати та документувати код, щоб він був максимально чистим, лаконічним і зрозумілим.
     У Kotlin код організовується за пакетами (package). Це дозволяє логічно розподіляти класи за їхнім призначенням — наприклад, окремо для роботи з інтерфейсом, базою даних, чи мережею.
     Прийнято, щоб один .kt файл містив лише один клас або інтерфейс. Це робить структуру проєкту зрозумілою — відкривши файл, ми одразу знаємо, що в ньому знаходиться.
     Для великих програм застосовують поділ на модулі: наприклад, core, api, ui. Такий підхід полегшує масштабування, тестування та оновлення коду.
     Якщо ці принципи ігнорувати, код швидко перетворюється на хаос — важко знайти потрібний клас, виникають конфлікти між залежностями, а будь-яке оновлення стає ризиком щось зламати.
     Отже, чітка структура — це основа підтримуваного коду.
     Форматування — це зовнішній вигляд коду, але його значення величезне.
     У Kotlin стандартом є 4 пробіли для відступів, а довжина рядка — до 120 символів.
     Використовується стиль дужок K&R, коли відкриваюча дужка стоїть на тому ж рядку, що й назва функції.
     Ці дрібниці створюють візуальну єдність. Коли всі дотримуються однакових відступів, очі не «спотикаються», а код читається легко — навіть великими блоками.
     Погане форматування призводить до плутанини: складніше побачити структуру програми, легше припуститися помилки у вкладеності умов або циклів.
     Тому в Kotlin, як і в інших сучасних мовах, важливо довіряти форматування інструментам IDE — Android Studio або ktlint. Вони автоматично вирівнюють код за стандартом.
     Іменування — це, мабуть, найважливіша частина чистого коду.
     У Kotlin діють чіткі правила:
     •  camelCase — для змінних і функцій, наприклад userName, printMessage();
     •  PascalCase — для класів та інтерфейсів, наприклад UserProfile;
     •  константи пишуться великими літерами через підкреслення: MAX_USERS = 100.
     Головне правило — ім’я повинно відображати сутність об’єкта.
     Якщо назви змінних і функцій зрозумілі, код стає самодокументованим — без зайвих коментарів.
     А от скорочення типу n, f чи tmp роблять код незрозумілим навіть для автора через кілька тижнів.
     Дотримання конвенцій іменування дозволяє уникати непорозумінь, полегшує рефакторинг і робить пошук у коді швидким та точним.
     Коментарі — це не просто текст, а інструмент пояснення логіки.
     У Kotlin вважається, що коментарі треба додавати лише там, де код справді складний або нетривіальний.
     Наприклад, якщо є якийсь складний алгоритм, то краще коротко пояснити ідею.
     Але якщо функція називається calculateAverage(), то коментар «функція обчислює середнє» буде зайвим. Код має «говорити сам за себе».
     Надмірна кількість коментарів лише заважає — вони швидко застарівають і вводять в оману.
     Але й повна відсутність пояснень також шкідлива, особливо коли логіка неочевидна. Тому важливо знайти баланс і залишати лише ті коментарі, що допомагають зрозуміти «чому», а не «що» робиться.
     Для документування у Kotlin використовується система KDoc — це аналог Javadoc, знайомого Java-розробникам.
     Коментарі у форматі KDoc автоматично відображаються в середовищі розробки, коли інший розробник наводить курсор на функцію або клас.
     Це значно прискорює роботу команди, адже документація завжди під рукою, і не потрібно відкривати окремі файли чи посилання.
     Вона також використовується для автоматичного створення офіційної документації бібліотек.
     Якщо ж документації немає — новим учасникам команди складніше розібратись у коді, зростає ризик неправильного використання функцій.
     Отже, KDoc — це частина комунікації всередині коду.
     Kotlin має низку рекомендацій, які роблять код більш ідіоматичним.
     Основні з них:
     •  Використовувати val замість var, коли можливо. Це означає, що змінна є незмінною, а отже — безпечнішою.
     •  Використовувати when замість довгих if-else, бо це коротше, логічніше і компілятор може перевіряти, чи всі випадки враховані.
     •  Замість конкатенації рядків використовувати string templates, наприклад:
     println("Hello, $name!") — це і коротше, і зручніше.
     •  Для моделей даних — data class, який автоматично створює методи toString, equals, copy і значно скорочує код.
     Якщо ці правила ігнорувати — програма стане громіздкою, дублюватиметься код, а логіка буде менш зрозумілою.
     Тому дотримання конвенцій — це не просто стиль, а ефективність і безпека.
     Щоб не перевіряти стиль вручну, використовують спеціальні інструменти:
     •  ktlint — перевіряє відповідність коду офіційним стандартам;
     •  detekt — проводить статичний аналіз і знаходить потенційні помилки або надлишкові частини коду;
     •  А Android Studio має вбудований форматер, який автоматично вирівнює код.
     Ці інструменти особливо важливі у великих командах: вони зменшують «людський фактор», автоматично виправляють стиль і дозволяють зосередитись на логіці, а не на пробілах.
     Чистий код — це не просто гарно оформлений код. Це ефективна командна робота.
     Коли код структурований і зрозумілий, новий розробник може швидко розібратися, навіть не знаючи деталей проекту.
     Код, написаний за стандартами, легше перевіряти, тестувати, оновлювати.
     А при рефакторингу — ризик щось зламати значно менший.
     Також чистий код допомагає уникати конфліктів у pull request — усі дотримуються одного стилю, і рев’ю зосереджується на змісті, а не на форматуванні.
     Отже, чистота коду прямо впливає на продуктивність, якість і стабільність проекту.
     Висновки: 
     Короткий огляд ключових моментів:
– Дотримання правил оформлення коду забезпечує читабельність, підтримуваність та надійність програм.
– У Kotlin особливу увагу слід приділяти використанню val замість var, оператору when для зручних розгалужень, string templates для роботи з рядками та data class для моделей.
– Чистий код підвищує продуктивність команди, спрощує тестування, рефакторинг і масштабування проєкту.
   Рекомендації для ефективного навчання та застосування правил оформлення коду:
– Використовувати офіційні гайдлайни (наприклад, Kotlin Coding Conventions від JetBrains).
– Практикувати написання коду з прикладами — порівнювати «поганий» та «чистий» варіанти.
– Застосовувати інструменти автоматичної перевірки стилю (Ktlint, Detekt).
– Виконувати код-рев’ю в команді для взаємного контролю якості.
– Регулярно рефакторити код, навіть якщо він працює, щоб зберігати його чистим і зрозумілим.


ДОДАТОК А

https://youtu.be/DDoORheFDTk

ДОДАТОК Б


Рисунок 1 – Перший слайд


Рисунок 2 – Другий слайд



Рисунок 3 – Третій слайд


Рисунок 4 – Четвертий слайд



Рисунок 5 – П’ятий слайд


Рисунок 6 – Шостий слайд



Рисунок 7 – Сьомий слайд


Рисунок 8 – Восьмий слайд



Рисунок 9 – Дев’ятий слайд


Рисунок 10 – Десятий слайд



Рисунок 11 – Одинадцятий слайд


Рисунок 12 – Дванадцятий слайд



Рисунок 13 – Тринадцятий слайд
